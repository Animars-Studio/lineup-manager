service: apollo-lambda

app: lineup-manager
org: asuramedia

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true
  environment:
    NODE_ENV: ${self:provider.stage}
    DB_USER: ${self:custom.databaseCredentials.username}
    DB_PASSWORD: ${self:custom.databaseCredentials.password}
    DB_HOST: ${self:custom.databaseCredentials.host}
    DB_PORT: ${self:custom.databaseCredentials.port}
    DB_NAME: ${self:custom.databaseCredentials.dbname}
    COGNITO_USER_POOL_ID: ${ssm:/${self:provider.stage}/cognito_user_pool_id}
    COGNITO_USER_POOL_CLIENT_ID: ${ssm:/${self:provider.stage}/cognito_user_pool_client_id}
    COGNITO_REGION: us-east-1
    AM_IS_OFFLINE: ${self:custom.isOffline}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource: 
            - arn:aws:ssm:${self:provider.region}:*:parameter/path/to/cognito/user_pool_id
            - arn:aws:ssm:${self:provider.region}:*:parameter/path/to/cognito/user_pool_client_id
        - Effect: Allow
          Action:
            - cognito-idp:ListGroups
          Resource: arn:aws:cognito-idp:${self:provider.region}:${self:custom.accountId}:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: arn:aws:s3:::lineup-manager-dev/*
        

functions:
  graphql:
    handler: dist/index.handler
    events:
      - httpApi:
          path: /
          method: POST
      - httpApi:
          path: /
          method: GET

build:
  esbuild: false

plugins:
  - serverless-offline
  - serverless-plugin-scripts
  - serverless-esbuild

custom:
  accountId: ${ssm:/account/id}
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    exclude: ['aws-sdk', 'aws-sdk/*']
    target: 'node16'
    platform: 'node'
    concurrency: 10

  isOffline: ${env:AM_IS_OFFLINE, "false"}
  offlineConfig:
    true:
      databaseCredentials:
        username: ${env:DB_USER}
        password: ${env:DB_PASSWORD}
        host: ${env:DB_HOST}
        port: ${env:DB_PORT}
        dbname: ${env:DB_NAME}
    false:
      databaseCredentials: ${ssm:/${self:provider.stage}/db/credentials}
  databaseCredentials: ${self:custom.offlineConfig.${self:custom.isOffline}.databaseCredentials}

package:
  patterns:
    - '!coverage/**'
    - '!test/**'
    - '!README.md'
    - '!LICENSE'
    - '!*.md'
    - '!*.lock'
    - '!src/**/*.test.ts'
    - '!dist/test/**'
    - 'dist/**'
    - 'node_modules/**'
    - '!node_modules/aws-sdk/**'  # Exclude aws-sdk to reduce size
    - '!node_modules/typescript/**'
    - '!node_modules/@types/**'
    - '!node_modules/.bin/**'
    - '!node_modules/eslint/**'
    - '!node_modules/eslint-plugin/**'