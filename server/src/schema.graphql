scalar DateTime
scalar Upload

type Error {
  message: String!
}

type CustomError {
  error: Error
}

type GenericResult {
  result: String
}

type User {
  id: ID!
  email: String!
  username: String
  isConfirmed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  teamId: ID
}

type CognitoGroup {
  name: String!
  description: String
}

type CognitoGroupsResult {
  groups: [CognitoGroup]
}

# auth
union CustomGraphQlResult = GenericResult | CustomError
union SignupResult = User | CustomError
union CognitoGroupsUnion = CognitoGroupsResult | CustomError

type Team {
  id: ID!
  name: String!
  country: String!
  logoUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

# team
union TeamResult = Team | CustomError

type Query {
  hello: String
  cognitoGroups: CognitoGroupsUnion
}

type Mutation {
  login(username: String!, password: String!): CustomGraphQlResult
  signup(email: String!, password: String!): SignupResult
  confirmSignup(username: String!, code: String!): CustomGraphQlResult
  resendConfirmationCode(username: String!): CustomGraphQlResult
  userGroups(username: String!): CognitoGroupsUnion
  addUserToGroup(username: String!, groupName: String!): CustomGraphQlResult
  createTeam(
    userId: String!
    name: String!
    country: String!
    file: Upload
  ): TeamResult
}

